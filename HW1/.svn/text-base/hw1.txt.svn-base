HW1 Due 11:59PM Feb. 3rd.

Please feel free to edit and check in this file any number of times until the
due time. You can ask for reviews at anytime (simply drop me an email asking
for review, don't email attachments, I can view your work from svn 
repository). Any file checked in outside of this directory will not be used
to grade this homework.

1. Which of these two concepts is more important to realize extensibility: 
inheritance or polymorphism? Explain.

Polymorphism and Inheritance are ways to realize extensibility in objects. Inheritance facilitates 
code reusability. It allows for extending the existing functionality to new type of objects without changing too much of existing code. 
But to enhance the functionality of the new object inheritance is not enough. It needs to be coupled with polymorphism to enhance functionality in newer objects.  

Through polymorphism, objects can be made to behave according to their context i.e. for the same lines of program code, 
two objects, can be made to act differently at run time. This lets us enhance functionality in new objects with 
little change to the existing program code.Thus realizing extensibility.

In static type languages like Java/C# to realize Polymorphism inheritance is needed. So both Polymorphism and Inheritance are 
equally required for achieving extensibility. In duck typed languages, as shown in class videos, Polymorphism can be realized
even without explicit inheritance. 

Code reusability is valuable, but enhancing functionality is the primary motive of extensibility. Making polymorphism more essential when compared to 
inheritance in the scope of extensibility.


2. Argue either in favor or against the following statement:
"Dynamic languages are weakly typed."
Answer:
Not all Dynamic languages are weakly typed.
In Dynamic typed languages data type is associated with value in the variables rather than the type with which variable is defined. i.e. type information is decided 
at run time rather than compile time. 

Consider following Python code:

>>> var1=123
>>> print type(var1)
<type 'int'>
>>> var1="hello"
>>> print type(var1)
<type 'str'>
>>> var2=var1+123
Traceback (most recent call last):
  File "<pyshell#35>", line 1, in <module>
    var2=var1+123
TypeError: cannot concatenate 'str' and 'int' objects

Consider following Javascript code:
var1=2;
document.write(var1*123);
var1="hello";
document.write(var1+"venkat");
document.write(var1+123);

Output to document from above code is 
426
hellovenkat
hello123


In case of Python, "var1" was initially assigned an int variable and at the first print statement output was int because var1 contained int value at the run time. 
After that a string variable is assigned to var1. In statically typed languages this will give  a compilation error/run time error. But in dynamically typed languages compiler will not perform
type checking. We can see that the second print statemnt shows type of the variable as "str" beacuse that is what var1 contained at run-time. Similarly incase of JavaScript var1 
first had int variable and then string variable i.e. dynamic typing. 

But the difference between the two languages what type of operations are allowed on the the datatypes. In case of Python, trying to concatenate an int value to a string variable
gave an error (Strong Typing). But in case of Javascript int variable is converted to String and added to the first string variable. (Weak Typing)

In Weakly typed languages variables do not adhere to a specific datatype. i.e. Even though a variable is defined as one datatype it can be implicitly used as another datatype. 
In case of strong typing, once the run time compilerdecides the datatype of that variable it should adhere to that type and there will be restrictions on what operations 
are allowed on that datatypes.

Thus "dynamic typing" concept is completely different from "Strong and Weak Typing". A dynamic type language can be of either Strongly or Weakly typed language.



3. Argue either in favor or against the following statement:
"Static typing makes your program safe."

In software Engineering one of the most important theory is "Errors should be caught as early as possible during the developemnt process"(ref:1). Errors such as wrongly casting a 
double to an int value can lead to unexpected results at later stages and can be very difficult to realize during debugging. So it is an obvious advantage that when compiler 
checks for wrong type casting and wrong assignments we get an error message for that.  Thus Static typing can lead to program safety in terms of expected results. 
But, as shown in the discussion list, Static type languages which are weakly typed can produce unexpected results even though compiler did not give any errors. Also, like in the 
example of Mars mission crash(conflict b/w km and miles), having type check done cannot guarantee to obtian expected/correct results. Similarly Statically and Strongly typed language compilers
do not check array bound exceptions that can occur during run time.  So we can see that there is a limit to the safety that can be realized from Static typing.
Programs needs to have extensive unit testing done to remove any bugs in the code. 

References:
1. "Find errors as early as possible on your project" -   http://blogs.techrepublic.com.com/tech-manager/?p=363 ... I edited the heading of this article.

Total:
Unit tests don't guarantee bug removal, however.
10