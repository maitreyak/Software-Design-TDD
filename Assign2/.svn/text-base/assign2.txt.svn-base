Assignment 2: Due 11:59PM Friday March 26th

I've provided sample code for Java, C#, and C++ (along with
the necessary jar, dll, and lib, respectively. If you will use
a language other than these, let me know and I will provide
the code in that language. If you plan to use some other language
on the JVM (like Groovy/Scala) or some other language on the .NET 
platform (like VB.NET, IronRuby, etc.) then the given binary files
(jar or dll) are usable with those as well).

You have been provided a piece of code that determines the current
temperature of a given city (cities are identified using a unique
id). The code uses third party classes to actually determine the
temperature. There are three such third party services (and so three
classes). Each one has a distinctive characteristic:

Service Provider 1 - this provider of service is free, that is, there 
is no cost to accessing this service. However, this service is quite
unreliable. It fails about 50% of the time.

Service Provider 2 - this provider of service charges fee. The 
reliability/availability is about 80% of the time.

Service Provider 3 - this provider is expensive, but has very high
availability.

The code that's provided to you uses these three services in such a way
as to minimize the cost of getting the temperature. It first tries to
get the temperature from provider 1, if that fails, tries provider 2,
and if that also fails, tries provider 3. We just learned that there
may be other providers that we could use with variable availability
and cost. The code given could be modified to accommodate for that
extension or we could make it better.

Todo:

1. Answer the following questions first:

(a). What are the design and code smells in the given code?
	
	(i).  Using separate If condition,instead of If-else ladder, for each provider is a bad practice. Because without if-else ladder, every "if" condition is checked even if its previous provider is a success. 
	(ii). Cohesion of the fetchTEmperature() method can be improved by splitting the method into two methods. One for "selecting the provider" and other for "getting temperature from that provider" 
	(iii). By using if condition for each provider, whenever you want to use new provider, the If block needs to be copy pasted thus having repetetion of code and modification of classes.
	(iv). In the future, If priorities for Providers change, sequence of If blocks need to be changed.
	(v). TemperatureFinder Class depends on many concrete classes. 
	(Vi). By re-factoring the code the Success flag can be removed.

(b). What design principles are being violated in the given code?
     (i). OCP is violated. When new provider comes in class needs to be modified with inclusion of new if block and possibly altering the sequence of if blocks. Thus violating "OCP".
	 (ii). In the method fetchTemperature() SRP is violated. This method does both the functions of choosing the provider and querying for temperature. 
	 (iii). Code in if blocks are repeated. This violates DRY principle.
	 (iv). Concrete class TempearatureFinder is depending upon other concrete classes. By redesigning the application, DIP can be enforced.
	 	        
(c). What is the value of A, I, and D' for the given code?
        (a). For TemperatureFinder class
        	A  = (# of abstract classes)/(total number of classes) 
				in given package, # of abstract classes = 0
				total number of classes = 1
				So, A = 0/1 = 0.
			I = (# of classes outside that this class depends upon)/(# of classes outside that this class depends upon + # of classes outside that depend upon this class).
	      		in this package, # of classes outside that this class depends on = 3
	      						 # of classes outside that depend upon this class = 0
	      		So, I = 3/(3+0)  = 1 .
	      	D' = |A+I-1|
				here A = 0, I = 1
				D' = 0
		(b). For Package Provider1
			A = 0/1 = 0
			I = 0 = 0/1 =0
			D' = |A+I-1| = 1
		(c) For Package Provider2
			A = 0/1 = 0
			I = 0 = 0/1 =0
			D' = |A+I-1| = 1
		(d) For Package Provider3
			A = 0/1 = 0
			I = 0 = 0/1 =0
			D' = |A+I-1| = 1
			
		Overall D' = (0+1+1+1)/4 = 0.75
		  
2. Now, ignore the code given (just leave it alone) and start with a TDD approach to create a piece of code that uses the three classes to provide the capability of the code you discarded. Remember, you are
still required to use the three classes (that are in the jar/dll/lib).

3. After you finish your new code with hopefully a better design,
answer the following questions:

(d) Explain how your new design is better than the one given to you?

Firstly, the OCP problem was addressed i.e. earlier, when new service providers needed to be included, the TemperatureFinder class needed significant change. 
In the newer design, the class need not be altered. Thus realizing OCP. 

Unlike earlier, where service provider list and code to query upon them were intermittent. Now they are split up and thus followed Single REsponsiblity Principle. And also the function is now more cohesive.  

Removed a lot of repeating code that existed in the fetchTemparature method in the old design. Thus DRY was enforced. 

In Earlier design, if the sequence/priorities of the providers change, we have to change the if blocks in TEmperatureFInder class. Now only ArrayList in TemperatureClient needs to be changed. TemperatureFinder is left untouched.

   
(e) What design principles did you follow in your new design?
OCP:The application is extensible with minimal code change.This is, in terms of new adding new service providers/service providers with changing priorities.
DIP: was applied. The TemperatureFinder Class now depends on a interface as opposed to a concrete class.
SRP: was achieved. Packages and classes are split up, as to has a single point responsibility.
DRY: Using TDD and re-factoring, needless repetition code was reduced.
  

(f) What is the value of A, I, and D' for your new design?
		(a). For package "temperature"
        		A  = (# of abstract classes)/(total number of classes) 
					in this package, # of abstract classes = 0
					total number of classes = 2
					So, A = 0/2 = 0.
				I = (# of classes outside that this class depends upon)/(# of classes outside that this class depends upon + # of classes outside that depend upon this class).
	      			in this package, # of classes outside that this class depends on = 3
	      						 # of classes outside that depend upon this class = 0
	      			So, I = 3/(3+0)  = 1 .
	      		D' = |A+I-1|
					here A = 0, I = 1
					D' = 0
		(b). For Package Provider1
			A = 0
			I = 0
			D' = 1
		(c) For Package Provider2
			A = 0
			I = 0
			D' = 1
		(d) For Package Provider3
			A = 0
			I = 0
			D' = 1
			
		(e) For package "Providers"
			# of abstract classes  = 1
			# of concrete classes  = 3
			A = 1/(1+3) = 1/4
			
			# of classes outside that this package depends upon, Ce = 3
			# of classes outside that depend upon this class, Ca = 2
			I = 3/(3+2)  = 3/5 = 0.6
			
			D' = |A+I-1| = |0.25 + 0.6 - 1| = 0.15   
		
		Overall D' = (0+1+1+1+0.15)/5 = 0.63
		
	We can observe that there is an improvement in D1 value compared to earlier design because, in the new design Abstract class has been introduced and depends on concrete classes 
	inverted to dependency on abstract class.
