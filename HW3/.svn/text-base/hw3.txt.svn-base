Homework #3 Due 11:59PM May 7th

A class StringWriter writes to a String. A class FileWriter writes
to a file. There are two tests TestStringWriter and TestFileWriter
that were used to drive the design of the classes StringWriter
and FileWriter, respectively. The two tests pretty much test the
same thing, but on two different classes.

1. What principle is being violated in the design above?

This design violates DRY principle. Both the test classes essentially tests the same functionality. So there is obvious repetition of code if we write two different test classes.

2. How would you fix it?

To fix DRY violation in the design, we can introduce an interface called Writer and make StringWriter and FileWriter implement Writer interface. This Writer interface has one function
write() for which both the writers provide their own implementation. Next step is to introduce an abstract TestWriter and make the TestStringWriter and TestFileWriter extend that 
TestWriter abstract class. TestStringWriter and TestFileWriter override two methods createWriter() ( which returns a Writer instance) and getWrittenContent() that are declared in TestWriter() class. 
Now if we test the write() functionality of the write() method on an instance of Writer, we will have both the StringWriter and FileWriter classes covered.

3. What design principles are you using in the above fix?

We are using DIP. In the original design, concrete classes TestStringWriter and TestFileWriter were depending on other concrete StringWriter and FileWriter respectively. In the new design, 
TestStringWiter and TestFileWriter are depending on abstract class TestWriter. So there is an inversion of dependency.

4. What design patterns are you using in the above fix?
We have followed Factory Method design pattern to fix the design. The createWriter and getWrittenContent which vary are implemented in the derived classes of TestWriter. The methods in the base class, TestWriter, that use 
the above methods, access them using polymorphism, realizing the DRY principle.

Total: 10pts

